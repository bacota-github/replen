AWSTemplateFormatVersion: '2010-09-09'

Description:
  Create VPC, subnets, serverless Aurora cluster, and an EC2 instance that can connect to the Aurora cluster.

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: REPLEN
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: REPLEN

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: REPLEN-PrivateSubnet1


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: REPLEN-PrivateSubnet2
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: REPLEN-PublicSubnet1
      
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: REPLEN-PublicSubnet2
      
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:     
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      DBSubnetGroupDescription: Subnets for database
      Tags:
        - Key: Name
          Value: REPLEN-DBSubnetGroup

  PublicRoutingTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
      Tags:
        - Key: Name
          Value: REPLEN

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteAssociation1:
    Type : AWS::EC2::SubnetRouteTableAssociation
    Properties :
      RouteTableId: !Ref PublicRoutingTable
      SubnetId : !Ref PublicSubnet1

  SubnetRouteAssociation2:
    Type : AWS::EC2::SubnetRouteTableAssociation
    Properties :
      RouteTableId: !Ref PublicRoutingTable
      SubnetId : !Ref PublicSubnet2

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for Database"
      Tags:
        - Key: Name
          Value: REPLEN-Database

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for Bastion Host"
      Tags:
        - Key: Name
          Value: REPLEN-Bastion

  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      FromPort: 3306
      ToPort: 3306

  BastionSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      CidrIp: "0.0.0.0/0"
      FromPort: 22
      ToPort: 22


  BastionSecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      CidrIp: "0.0.0.0/0"
      FromPort: 80
      ToPort: 80

  BastionSecurityGroupIngressSSL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      CidrIp: "0.0.0.0/0"
      FromPort: 443
      ToPort: 443
